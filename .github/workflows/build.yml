name: Build Binaries and Plugin

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build binary on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install pkg
        run: npm install -g pkg

      - name: Build binary on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir -p dist
          pkg . --targets node18-win-x64 --output dist/server-windows.exe

      - name: Build binary on macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          mkdir -p dist
          pkg . --targets node18-macos-x64 --output dist/server-macos

      - name: Build binary on Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          mkdir -p dist
          pkg . --targets node18-linux-x64 --output dist/server-linux

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Upload the exact binary, not a wildcard
          name: ftp-server-${{ matrix.os }}
          path: |
            dist/server-windows.exe
            dist/server-macos
            dist/server-linux

  build-plugins:
    name: Build Plugin
    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚òï Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 22

      - name: üöÄ Build plugin
        run: mvn clean package

      - name: üßº Rename jar
        run: |
          mkdir -p out
          mv target/LiveUpdater-*.jar out/LiveUpdater.jar

      - name: üì§ Upload plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: LiveUpdater
          path: out/LiveUpdater.jar

  release:
    name: üöÄ Release Plugin + Binaries
    needs: build-plugins
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üßæ Read version from plugin.yml
        id: get_version
        run: |
          VERSION=$(grep '^version:' src/main/resources/plugin.yml | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üì¶ Generate tag info
        id: release_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          COUNT=$(gh release list --limit 100 | grep "^v$VERSION" | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "name=v$VERSION" >> $GITHUB_OUTPUT
          else
            PATCH_NUM=$COUNT
            echo "tag=v$VERSION-patch-$PATCH_NUM" >> $GITHUB_OUTPUT
            echo "name=v$VERSION Patch $PATCH_NUM" >> $GITHUB_OUTPUT
          fi

      - name: ‚¨áÔ∏è Download plugin JAR
        uses: actions/download-artifact@v4
        with:
          name: LiveUpdater
          path: out

      # Download binaries
      - name: ‚¨áÔ∏è Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: ftp-server-windows-latest
          path: temp/windows

      - name: ‚¨áÔ∏è Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: ftp-server-macos-latest
          path: temp/macos

      - name: ‚¨áÔ∏è Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: ftp-server-ubuntu-latest
          path: temp/linux

      # Move unzipped or zipped binaries into release folder
      - name: üì¶ Collect binaries
        run: |
          mkdir -p artifacts/binaries
          for platform in windows macos linux; do
            src=temp/$platform
            file=$(find $src -type f -name 'server-*' | head -n 1)
            cp "$file" "artifacts/binaries/$(basename $file)"
          done

      - name: üì¶ List all release files
        run: |
          echo "Binaries:"
          ls -lh artifacts/binaries
          echo "Plugin:"
          ls -lh out

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_tag.outputs.tag }}
          name: ${{ steps.release_tag.outputs.name }}
          files: |
            out/LiveUpdater.jar
            artifacts/binaries/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}