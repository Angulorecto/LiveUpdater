name: Build Binaries and Plugin

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build binary on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 🏗️ Build Windows binary
        if: runner.os == 'Windows'
        run: |
          pip install pyinstaller
          pyinstaller server.py --onefile --name server-windows --clean --noconfirm --console --win-private-assemblies --manifest "server.exe.manifest" --log-level=DEBUG
          mkdir dist-renamed
          copy server-windows.exe dist-renamed\

      - name: 🛠 Build Python executable
        if: runner.os != 'Windows'
        run: |
          pyinstaller --onefile server.py

      - name: 🏷️ Rename binary on macOS
        if: runner.os == 'macOS'
        run: |
          mkdir -p dist-renamed
          mv dist/server dist-renamed/server-macos
          chmod +x ./dist-renamed/server-macos

      - name: 🏷️ Rename binary on Linux
        if: runner.os == 'Linux'
        run: |
          mkdir -p dist-renamed
          mv dist/server dist-renamed/server-linux
          chmod +x ./dist-renamed/server-linux

      - name: 📤 Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ runner.os }}
          path: dist-renamed/*

  build-plugins:
    name: Build Plugin
    needs: build-binaries
    runs-on: ubuntu-latest
  
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
  
      - name: ☕ Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 22
  
      - name: 🚀 Build plugin with server binary
        run: mvn clean package
  
      - name: 🧼 Rename jar
        run: |
          mkdir -p out
          mv target/LiveUpdater-*.jar out/LiveUpdater.jar

      - name: 📤 Upload plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: LiveUpdater
          path: out/LiveUpdater.jar

  release:
    name: 🚀 Release Plugin + Binaries
    needs: [build-plugins]
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🧾 Read version from plugin.yml
        id: get_version
        run: |
          VERSION=$(grep '^version:' src/main/resources/plugin.yml | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 📦 Get existing releases and determine tag name
        id: release_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          COUNT=$(gh release list --limit 100 | grep "^v$VERSION" | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "name=v$VERSION" >> $GITHUB_OUTPUT
          else
            PATCH_NUM=$COUNT
            echo "tag=v$VERSION-patch-$PATCH_NUM" >> $GITHUB_OUTPUT
            echo "name=v$VERSION Patch $PATCH_NUM" >> $GITHUB_OUTPUT
          fi

      - name: ⬇️ Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: binary-Windows
          path: artifacts/binaries

      - name: ⬇️ Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: binary-Linux
          path: artifacts/binaries

      - name: ⬇️ Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: binary-macOS
          path: artifacts/binaries
      
      - name: ⬇️ Download plugin JAR
        uses: actions/download-artifact@v4
        with:
          name: LiveUpdater
          path: out

      - name: 📦 List all files
        run: |
          ls ./artifacts/binaries

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_tag.outputs.tag }}
          name: ${{ steps.release_tag.outputs.name }}
          files: |
            out/LiveUpdater*.jar
            artifacts/binaries/server-*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}