name: Build and Release Plugin

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      # Use specific Python version for Windows only
      - name: Set up Python 3.10.11 on Windows
        if: matrix.os == 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.11
          architecture: x64

      - name: Set up Python (default for other OSes)
        if: matrix.os != 'windows-latest'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip pyinstaller

      - name: Build server binary
        run: |
          pyinstaller server.spec
        shell: bash

      - name: Rename server binary
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            mv dist/server.exe server-windows.exe
          elif [ "${{ runner.os }}" == "macOS" ]; then
            mv dist/server server-macos
            chmod +x server-macos
          else
            mv dist/server server-linux
            chmod +x server-linux
          fi
        shell: bash

      - name: Upload server binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-binaries
          path: |
            server-windows.exe
            server-linux
            server-macos

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: server-binaries
          path: dist/

      - name: Get plugin version
        id: get_version
        run: |
          VERSION=$(grep 'version:' plugin.yml | awk '{print $2}')
          echo "plugin_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check existing releases
        id: patch_check
        run: |
          VERSION="${{ steps.get_version.outputs.plugin_version }}"
          RELEASES=$(gh release list --limit 100 | grep "v$VERSION" || true)
          PATCH_COUNT=$(echo "$RELEASES" | wc -l)
          if [ "$PATCH_COUNT" -eq 0 ]; then
            TITLE="v$VERSION"
          else
            TITLE="v$VERSION Patch $PATCH_COUNT"
          fi
          echo "release_title=$TITLE" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.patch_check.outputs.release_title }}
          tag_name: ${{ github.ref_name }}
          files: |
            dist/server-windows.exe
            dist/server-linux
            dist/server-macos
            plugin/build/libs/*.jar