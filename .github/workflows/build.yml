name: Build Binaries and Plugin

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build binary on ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install pkg
        run: npm install -g pkg

      - name: Build binary
        run: |
          pkg . --targets node18-${{ matrix.os == 'windows-latest' && 'win-x64' || matrix.os == 'macos-latest' && 'macos-x64' || 'linux-x64' }} --output dist/ftp-server

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ftp-server-${{ matrix.os }}
          path: dist/ftp-server*

  build-plugins:
    name: Build Plugin
    needs: build-binaries
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚òï Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 22

      - name: üöÄ Build plugin
        run: mvn clean package

      - name: üßº Rename jar
        run: |
          mkdir -p out
          mv target/LiveUpdater-*.jar out/LiveUpdater.jar

      - name: üì§ Upload plugin artifact
        uses: actions/upload-artifact@v4
        with:
          name: LiveUpdater
          path: out/LiveUpdater.jar

  release:
    name: üöÄ Release Plugin + Binaries
    needs: build-plugins
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üßæ Read version from plugin.yml
        id: get_version
        run: |
          VERSION=$(grep '^version:' src/main/resources/plugin.yml | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üì¶ Generate tag info
        id: release_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          COUNT=$(gh release list --limit 100 | grep "^v$VERSION" | wc -l)
          if [ "$COUNT" -eq 0 ]; then
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "name=v$VERSION" >> $GITHUB_OUTPUT
          else
            PATCH_NUM=$COUNT
            echo "tag=v$VERSION-patch-$PATCH_NUM" >> $GITHUB_OUTPUT
            echo "name=v$VERSION Patch $PATCH_NUM" >> $GITHUB_OUTPUT
          fi

      - name: ‚¨áÔ∏è Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: binary-Windows
          path: artifacts/binaries

      - name: ‚¨áÔ∏è Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: binary-Linux
          path: artifacts/binaries

      - name: ‚¨áÔ∏è Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: binary-macOS
          path: artifacts/binaries

      - name: ‚¨áÔ∏è Download plugin JAR
        uses: actions/download-artifact@v4
        with:
          name: LiveUpdater
          path: out

      - name: üì¶ List all release files
        run: |
          echo "Binaries:"
          ls -lh artifacts/binaries
          echo "Plugin:"
          ls -lh out

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_tag.outputs.tag }}
          name: ${{ steps.release_tag.outputs.name }}
          files: |
            out/LiveUpdater.jar
            artifacts/binaries/server-*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}